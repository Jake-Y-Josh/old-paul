<%- include('../../partials/admin-page-header', {
  pageTitle: 'Edit Feedback Form',
  pageDescription: 'Update your feedback form settings and questions',
  breadcrumbs: [
    { label: 'Forms', url: '/admin/forms' },
    { label: 'Edit Form' }
  ],
  actionButtons: [
    { type: 'link', url: '/admin/forms', icon: 'fas fa-arrow-left', label: 'Back to Forms', className: 'btn-outline-secondary' }
  ]
}) %>

<div class="container-fluid px-4">
  <div class="card">
    <div class="card-body">
      <form id="editFormForm">
        <input type="hidden" id="form-id" value="<%= form.id %>">
        <div class="mb-4">
          <label for="form-title" class="form-label">Form Title</label>
          <input type="text" class="form-control" id="form-title" name="title" value="<%= form.title %>" required>
          <div class="form-text">Give your form a descriptive name</div>
        </div>
        
        <div class="mb-4">
          <label for="form-description" class="form-label">Description</label>
          <textarea class="form-control" id="form-description" name="description" rows="3"><%= form.description || '' %></textarea>
          <div class="form-text">Add instructions or information that will be shown at the top of the form</div>
        </div>
        
        <div class="mb-4">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <label class="form-label m-0" id="form-steps-label">Form Steps</label>
            <div class="form-check form-switch">
              <input class="form-check-input" type="checkbox" id="is-multi-step" name="isMultiStep" <%= form.is_multi_step ? 'checked' : '' %>>
              <label class="form-check-label" for="is-multi-step">Enable Multi-Step Form</label>
            </div>
          </div>
          
          <div id="steps-container" class="<%= !form.is_multi_step ? 'd-none' : '' %>">
            <p class="text-muted small">Configure the steps of your form. Each question can be assigned to a specific step.</p>
            
            <div class="row g-2" id="steps-list">
              <% if (form.steps && form.steps.length > 0) { %>
                <% form.steps.forEach((step, index) => { %>
                  <div class="col-md-4 step-item" data-step-id="<%= index %>">
                    <div class="card">
                      <div class="card-body p-3">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                          <span class="step-number">Step <%= index + 1 %></span>
                          <% if (index > 0) { %>
                            <button type="button" class="btn btn-sm btn-link text-danger remove-step p-0" title="Remove Step">
                              <i class="fas fa-times"></i>
                            </button>
                          <% } %>
                        </div>
                        <div class="mb-3">
                          <input type="text" class="form-control form-control-sm step-title" placeholder="Step Title" value="<%= step.title || '' %>">
                        </div>
                        <div>
                          <textarea class="form-control form-control-sm step-description" rows="2" placeholder="Step Description"><%= step.description || '' %></textarea>
                        </div>
                      </div>
                    </div>
                  </div>
                <% }); %>
              <% } else { %>
                <div class="col-md-4 step-item" data-step-id="0">
                  <div class="card">
                    <div class="card-body p-3">
                      <div class="d-flex justify-content-between align-items-center mb-2">
                        <span class="step-number">Step 1</span>
                      </div>
                      <div class="mb-3">
                        <input type="text" class="form-control form-control-sm step-title" placeholder="Step Title" value="Basic Information">
                      </div>
                      <div>
                        <textarea class="form-control form-control-sm step-description" rows="2" placeholder="Step Description">Please provide the basic information requested below.</textarea>
                      </div>
                    </div>
                  </div>
                </div>
              <% } %>
              
              <div class="col-md-4">
                <button type="button" class="btn btn-outline-secondary btn-sm w-100 h-100" id="add-step">
                  <i class="fas fa-plus"></i> Add Step
                </button>
              </div>
            </div>
          </div>
        </div>
        
        <div class="mb-4">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <label class="form-label m-0">Form Questions</label>
            <button type="button" class="btn btn-primary btn-sm" id="add-question">
              <i class="fas fa-plus"></i> Add Question
            </button>
          </div>
          
          <div id="questions-container">
            <% if (form.questions && form.questions.length > 0) { %>
              <% form.questions.forEach((question, index) => { %>
                <div class="card mb-3 question-card" data-question-id="<%= index %>">
                  <div class="card-header bg-light d-flex justify-content-between align-items-center py-2">
                    <span class="question-number">Question <%= index + 1 %></span>
                    <div>
                      <button type="button" class="btn btn-sm btn-link move-question-up" title="Move Up">
                        <i class="fas fa-arrow-up"></i>
                      </button>
                      <button type="button" class="btn btn-sm btn-link move-question-down" title="Move Down">
                        <i class="fas fa-arrow-down"></i>
                      </button>
                      <button type="button" class="btn btn-sm btn-link text-danger remove-question" title="Remove Question">
                        <i class="fas fa-trash"></i>
                      </button>
                    </div>
                  </div>
                  <div class="card-body">
                    <div class="mb-3">
                      <div class="d-flex justify-content-between align-items-center mb-2">
                        <label class="form-label">Question Text</label>
                        <div class="step-selector <%= !form.is_multi_step ? 'd-none' : '' %>">
                          <label class="form-label small me-2">Step:</label>
                          <select class="form-select form-select-sm question-step" style="width: auto; display: inline-block;">
                            <% if (form.steps && form.steps.length > 0) { %>
                              <% form.steps.forEach((step, stepIndex) => { %>
                                <option value="<%= stepIndex %>" <%= question.step === stepIndex ? 'selected' : '' %>>
                                  Step <%= stepIndex + 1 %>: <%= step.title || 'Untitled' %>
                                </option>
                              <% }); %>
                            <% } else { %>
                              <option value="0">Step 1</option>
                            <% } %>
                          </select>
                        </div>
                      </div>
                      <input type="text" class="form-control question-text" value="<%= question.text %>" required>
                    </div>
                    <div class="row mb-3">
                      <div class="col-md-6">
                        <label class="form-label">Question Type</label>
                        <select class="form-select question-type">
                          <option value="text" <%= question.type === 'text' ? 'selected' : '' %>>Short Text</option>
                          <option value="textarea" <%= question.type === 'textarea' ? 'selected' : '' %>>Long Text</option>
                          <option value="radio" <%= question.type === 'radio' ? 'selected' : '' %>>Multiple Choice (Radio)</option>
                          <option value="checkbox" <%= question.type === 'checkbox' ? 'selected' : '' %>>Checkboxes (Multiple Selection)</option>
                          <option value="select" <%= question.type === 'select' ? 'selected' : '' %>>Dropdown</option>
                          <option value="rating" <%= question.type === 'rating' ? 'selected' : '' %>>Rating</option>
                          <option value="date" <%= question.type === 'date' ? 'selected' : '' %>>Date</option>
                          <option value="email" <%= question.type === 'email' ? 'selected' : '' %>>Email</option>
                          <option value="tel" <%= question.type === 'tel' ? 'selected' : '' %>>Phone Number</option>
                        </select>
                      </div>
                      <div class="col-md-6">
                        <label class="form-label">Required?</label>
                        <div class="form-check form-switch mt-2">
                          <input class="form-check-input question-required" type="checkbox" <%= question.required ? 'checked' : '' %>>
                          <label class="form-check-label">Make this question required</label>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Options for multiple choice questions -->
                    <div class="options-container <%= ['radio', 'checkbox', 'select'].includes(question.type) ? '' : 'd-none' %>">
                      <label class="form-label">Options</label>
                      <div class="options-list">
                        <% if (question.options && question.options.length > 0) { %>
                          <% question.options.forEach((option, optionIndex) => { %>
                            <div class="input-group mb-2 option-item">
                              <input type="text" class="form-control option-text" value="<%= option.text || option %>" placeholder="Option text">
                              <button class="btn btn-outline-danger remove-option" type="button">
                                <i class="fas fa-times"></i>
                              </button>
                            </div>
                          <% }); %>
                        <% } else { %>
                          <div class="input-group mb-2 option-item">
                            <input type="text" class="form-control option-text" placeholder="Option text">
                            <button class="btn btn-outline-danger remove-option" type="button">
                              <i class="fas fa-times"></i>
                            </button>
                          </div>
                        <% } %>
                      </div>
                      <button type="button" class="btn btn-sm btn-outline-secondary add-option mt-2">
                        <i class="fas fa-plus"></i> Add Option
                      </button>
                    </div>
                    
                    <!-- Rating scale settings -->
                    <div class="rating-container <%= question.type === 'rating' ? '' : 'd-none' %>">
                      <div class="row">
                        <div class="col-md-4">
                          <label class="form-label">Scale</label>
                          <select class="form-select rating-scale">
                            <option value="5" <%= !question.scale || question.scale === 5 ? 'selected' : '' %>>5 Stars</option>
                            <option value="10" <%= question.scale === 10 ? 'selected' : '' %>>10 Points</option>
                          </select>
                        </div>
                        <div class="col-md-4">
                          <label class="form-label">Low Label</label>
                          <input type="text" class="form-control rating-low" placeholder="e.g., Poor" value="<%= question.lowLabel || 'Poor' %>">
                        </div>
                        <div class="col-md-4">
                          <label class="form-label">High Label</label>
                          <input type="text" class="form-control rating-high" placeholder="e.g., Excellent" value="<%= question.highLabel || 'Excellent' %>">
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              <% }); %>
            <% } %>
          </div>
        </div>
        
        <div class="alert alert-danger d-none" id="form-error"></div>
        
        <div class="d-flex justify-content-end gap-2">
          <a href="/admin/forms" class="btn btn-outline-secondary" id="cancel-btn">Cancel</a>
          <button type="button" class="btn btn-primary" id="save-form-btn">
            <i class="fas fa-save"></i> Update Form
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Question Template for JavaScript -->
<template id="question-template">
  <div class="card mb-3 question-card" data-question-id="{id}">
    <div class="card-header bg-light d-flex justify-content-between align-items-center py-2">
      <span class="question-number">Question {number}</span>
      <div>
        <button type="button" class="btn btn-sm btn-link move-question-up" title="Move Up">
          <i class="fas fa-arrow-up"></i>
        </button>
        <button type="button" class="btn btn-sm btn-link move-question-down" title="Move Down">
          <i class="fas fa-arrow-down"></i>
        </button>
        <button type="button" class="btn btn-sm btn-link text-danger remove-question" title="Remove Question">
          <i class="fas fa-trash"></i>
        </button>
      </div>
    </div>
    <div class="card-body">
      <div class="mb-3">
        <div class="d-flex justify-content-between align-items-center mb-2">
          <label class="form-label">Question Text</label>
          <div class="step-selector d-none">
            <label class="form-label small me-2">Step:</label>
            <select class="form-select form-select-sm question-step" style="width: auto; display: inline-block;">
              <!-- Steps will be populated via JavaScript -->
            </select>
          </div>
        </div>
        <input type="text" class="form-control question-text" value="" required>
      </div>
      <div class="row mb-3">
        <div class="col-md-6">
          <label class="form-label">Question Type</label>
          <select class="form-select question-type">
            <option value="text">Short Text</option>
            <option value="textarea">Long Text</option>
            <option value="radio">Multiple Choice (Radio)</option>
            <option value="checkbox">Checkboxes (Multiple Selection)</option>
            <option value="select">Dropdown</option>
            <option value="rating">Rating</option>
            <option value="date">Date</option>
            <option value="email">Email</option>
            <option value="tel">Phone Number</option>
          </select>
        </div>
        <div class="col-md-6">
          <label class="form-label">Required?</label>
          <div class="form-check form-switch mt-2">
            <input class="form-check-input question-required" type="checkbox">
            <label class="form-check-label">Make this question required</label>
          </div>
        </div>
      </div>
      
      <!-- Options for multiple choice questions -->
      <div class="options-container d-none">
        <label class="form-label">Options</label>
        <div class="options-list">
          <div class="input-group mb-2 option-item">
            <input type="text" class="form-control option-text" placeholder="Option text">
            <button class="btn btn-outline-danger remove-option" type="button">
              <i class="fas fa-times"></i>
            </button>
          </div>
        </div>
        <button type="button" class="btn btn-sm btn-outline-secondary add-option mt-2">
          <i class="fas fa-plus"></i> Add Option
        </button>
      </div>
      
      <!-- Rating scale settings -->
      <div class="rating-container d-none">
        <div class="row">
          <div class="col-md-4">
            <label class="form-label">Scale</label>
            <select class="form-select rating-scale">
              <option value="5" selected>5 Stars</option>
              <option value="10">10 Points</option>
            </select>
          </div>
          <div class="col-md-4">
            <label class="form-label">Low Label</label>
            <input type="text" class="form-control rating-low" placeholder="e.g., Poor" value="Poor">
          </div>
          <div class="col-md-4">
            <label class="form-label">High Label</label>
            <input type="text" class="form-control rating-high" placeholder="e.g., Excellent" value="Excellent">
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<!-- Step Template for JavaScript -->
<template id="step-template">
  <div class="col-md-4 step-item" data-step-id="{id}">
    <div class="card">
      <div class="card-body p-3">
        <div class="d-flex justify-content-between align-items-center mb-2">
          <span class="step-number">Step {number}</span>
          <button type="button" class="btn btn-sm btn-link text-danger remove-step p-0" title="Remove Step">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="mb-3">
          <input type="text" class="form-control form-control-sm step-title" placeholder="Step Title">
        </div>
        <div>
          <textarea class="form-control form-control-sm step-description" rows="2" placeholder="Step Description"></textarea>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Get individual form data elements directly
    const formId = <%= form.id %>;
    const formTitle = "<%-form.title.replace(/"/g, '\\"')%>";
    const formDescription = "<%-form.description ? form.description.replace(/"/g, '\\"') : ''%>";
    const isMultiStep = <%= form.is_multi_step ? true : false %>;
    const formSteps = <%- JSON.stringify(form.steps || []) %>;
    const formQuestions = <%- JSON.stringify(form.questions || []) %>;
    
    const isMultiStepSwitch = document.getElementById('is-multi-step');
    const stepsContainer = document.getElementById('steps-container');
    const formStepsLabel = document.getElementById('form-steps-label');
    const addStepBtn = document.getElementById('add-step');
    const stepsList = document.getElementById('steps-list');
    const questionsContainer = document.getElementById('questions-container');
    const addQuestionBtn = document.getElementById('add-question');
    const saveBtn = document.getElementById('save-form-btn');
    const cancelBtn = document.getElementById('cancel-btn');
    const questionTemplate = document.getElementById('question-template').innerHTML;
    const stepTemplate = document.getElementById('step-template').innerHTML;
    
    // Initially hide/show the form steps label based on checkbox state
    formStepsLabel.style.display = isMultiStepSwitch.checked ? 'block' : 'none';
    
    // Toggle multi-step form UI
    isMultiStepSwitch.addEventListener('change', function() {
      stepsContainer.classList.toggle('d-none', !this.checked);
      formStepsLabel.style.display = this.checked ? 'block' : 'none';
      document.querySelectorAll('.step-selector').forEach(el => {
        el.classList.toggle('d-none', !this.checked);
      });
    });
    
    // Add step button
    if (addStepBtn) {
      addStepBtn.addEventListener('click', function() {
        const stepItems = document.querySelectorAll('.step-item');
        const newStepId = stepItems.length;
        const newStepHtml = stepTemplate
          .replace(/{id}/g, newStepId)
          .replace(/{number}/g, newStepId + 1);
        
        // Insert the new step before the add button
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = newStepHtml;
        stepsList.insertBefore(tempDiv.firstElementChild, addStepBtn.parentElement);
        
        // Update question step selectors
        updateStepSelectors();
        
        // Add event listener for remove step button
        setupStepRemoveHandlers();
      });
    }
    
    // Setup step remove handlers
    function setupStepRemoveHandlers() {
      document.querySelectorAll('.remove-step').forEach(btn => {
        btn.addEventListener('click', function() {
          const stepItem = this.closest('.step-item');
          if (stepItem && confirm('Are you sure you want to remove this step?')) {
            stepItem.remove();
            reindexSteps();
            updateStepSelectors();
          }
        });
      });
    }
    
    // Reindex steps after removal
    function reindexSteps() {
      const stepItems = document.querySelectorAll('.step-item');
      stepItems.forEach((item, index) => {
        item.dataset.stepId = index;
        item.querySelector('.step-number').textContent = `Step ${index + 1}`;
      });
    }
    
    // Update step selectors in questions
    function updateStepSelectors() {
      const steps = Array.from(document.querySelectorAll('.step-item')).map((el, index) => {
        const title = el.querySelector('.step-title').value || 'Untitled';
        return { id: index, title: title };
      });
      
      document.querySelectorAll('.question-step').forEach(select => {
        const currentValue = select.value;
        select.innerHTML = '';
        
        steps.forEach(step => {
          const option = document.createElement('option');
          option.value = step.id;
          option.textContent = `Step ${parseInt(step.id) + 1}: ${step.title}`;
          select.appendChild(option);
        });
        
        if (steps.length > 0 && currentValue < steps.length) {
          select.value = currentValue;
        }
      });
    }
    
    // Add question button
    addQuestionBtn.addEventListener('click', function() {
      const questionCount = document.querySelectorAll('.question-card').length;
      const newQuestionHtml = questionTemplate
        .replace(/{id}/g, questionCount)
        .replace(/{number}/g, questionCount + 1);
      
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = newQuestionHtml;
      questionsContainer.appendChild(tempDiv.firstElementChild);
      
      // Set up event handlers for the new question
      setupQuestionHandlers(questionsContainer.lastElementChild);
      
      // Add step selector options if multi-step is enabled
      if (isMultiStepSwitch.checked) {
        const stepSelector = questionsContainer.lastElementChild.querySelector('.step-selector');
        stepSelector.classList.remove('d-none');
        updateStepSelectors();
      }
    });
    
    // Function to set up question handlers
    function setupQuestionHandlers(questionEl) {
      // Type change handler
      const typeSelect = questionEl.querySelector('.question-type');
      typeSelect.addEventListener('change', function() {
        const optionsContainer = questionEl.querySelector('.options-container');
        const ratingContainer = questionEl.querySelector('.rating-container');
        
        optionsContainer.classList.toggle('d-none', !['radio', 'checkbox', 'select'].includes(this.value));
        ratingContainer.classList.toggle('d-none', this.value !== 'rating');
      });
      
      // Add option button
      const addOptionBtn = questionEl.querySelector('.add-option');
      if (addOptionBtn) {
        addOptionBtn.addEventListener('click', function() {
          const optionsList = this.previousElementSibling;
          const optionItem = optionsList.querySelector('.option-item').cloneNode(true);
          optionItem.querySelector('.option-text').value = '';
          optionsList.appendChild(optionItem);
          
          // Set up remove handler for the new option
          setupOptionRemoveHandlers(optionItem);
        });
      }
      
      // Remove option buttons
      setupOptionRemoveHandlers(questionEl);
      
      // Remove question button
      const removeBtn = questionEl.querySelector('.remove-question');
      removeBtn.addEventListener('click', function() {
        if (confirm('Are you sure you want to remove this question?')) {
          questionEl.remove();
          reindexQuestions();
        }
      });
      
      // Move up button
      const moveUpBtn = questionEl.querySelector('.move-question-up');
      moveUpBtn.addEventListener('click', function() {
        const card = this.closest('.question-card');
        const prev = card.previousElementSibling;
        
        if (prev) {
          questionsContainer.insertBefore(card, prev);
          reindexQuestions();
        }
      });
      
      // Move down button
      const moveDownBtn = questionEl.querySelector('.move-question-down');
      moveDownBtn.addEventListener('click', function() {
        const card = this.closest('.question-card');
        const next = card.nextElementSibling;
        
        if (next) {
          questionsContainer.insertBefore(next, card);
          reindexQuestions();
        }
      });
    }
    
    // Set up handlers for removing options
    function setupOptionRemoveHandlers(container) {
      const removeBtns = container.querySelectorAll ? 
        container.querySelectorAll('.remove-option') : 
        [container.querySelector('.remove-option')];
      
      removeBtns.forEach(btn => {
        btn.addEventListener('click', function() {
          const optionsItems = this.closest('.options-list').querySelectorAll('.option-item');
          if (optionsItems.length > 1) {
            this.closest('.option-item').remove();
          } else {
            this.closest('.option-item').querySelector('.option-text').value = '';
          }
        });
      });
    }
    
    // Reindex question numbers
    function reindexQuestions() {
      const questions = document.querySelectorAll('.question-card');
      questions.forEach((q, i) => {
        q.dataset.questionId = i;
        q.querySelector('.question-number').textContent = `Question ${i + 1}`;
      });
    }
    
    // Set up handlers for existing questions
    document.querySelectorAll('.question-card').forEach(questionEl => {
      setupQuestionHandlers(questionEl);
    });
    
    // Set up handlers for existing steps
    setupStepRemoveHandlers();
    
    // Save form button
    saveBtn.addEventListener('click', async function() {
      try {
        // Disable button and show loading state
        const originalText = saveBtn.innerHTML;
        saveBtn.disabled = true;
        saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
        
        // Get form data
        const title = document.getElementById('form-title').value;
        const description = document.getElementById('form-description').value;
        const isMultiStepEnabled = document.getElementById('is-multi-step').checked;
        
        // Validate basic info
        if (!title) {
          throw new Error('Form title is required');
        }
        
        // Get steps data if multi-step is enabled
        let steps = [];
        if (isMultiStepEnabled) {
          document.querySelectorAll('.step-item').forEach((el, index) => {
            steps.push({
              id: index,
              title: el.querySelector('.step-title').value || `Step ${index + 1}`,
              description: el.querySelector('.step-description').value || ''
            });
          });
          
          if (steps.length === 0) {
            throw new Error('Multi-step form requires at least one step');
          }
        }
        
        // Get questions data
        const questions = [];
        document.querySelectorAll('.question-card').forEach(el => {
          const questionId = el.dataset.questionId;
          const text = el.querySelector('.question-text').value;
          const type = el.querySelector('.question-type').value;
          const required = el.querySelector('.question-required').checked;
          const stepSelect = el.querySelector('.question-step');
          const step = stepSelect && isMultiStepEnabled ? parseInt(stepSelect.value) : 0;
          
          if (!text) {
            throw new Error(`Question ${parseInt(questionId) + 1} text is required`);
          }
          
          const question = {
            id: questionId,
            text,
            type,
            required,
            step
          };
          
          // Get options for multiple choice questions
          if (['radio', 'checkbox', 'select'].includes(type)) {
            const options = [];
            el.querySelectorAll('.option-text').forEach(optionEl => {
              const optionText = optionEl.value.trim();
              if (optionText) {
                options.push({ text: optionText });
              }
            });
            
            if (options.length === 0) {
              throw new Error(`Question ${parseInt(questionId) + 1} requires at least one option`);
            }
            
            question.options = options;
          }
          
          // Get rating scale settings
          if (type === 'rating') {
            question.scale = parseInt(el.querySelector('.rating-scale').value);
            question.lowLabel = el.querySelector('.rating-low').value;
            question.highLabel = el.querySelector('.rating-high').value;
          }
          
          questions.push(question);
        });
        
        if (questions.length === 0) {
          throw new Error('At least one question is required');
        }
        
        // Build form object
        const formObject = {
          id: formId,
          title,
          description,
          isMultiStep: isMultiStepEnabled,
          steps,
          questions
        };
        
        // Send to server
        const response = await fetch(`/admin/forms/${formId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formObject)
        });
        
        const data = await response.json();
        
        if (!data.success) {
          throw new Error(data.message || 'Failed to update form');
        }
        
        // Show success message and redirect
        alert('Form updated successfully!');
        window.location.href = '/admin/forms';
        
      } catch (error) {
        console.error('Form update error:', error);
        
        // Reset button state
        saveBtn.disabled = false;
        saveBtn.innerHTML = originalText;
        
        // Show error message
        const errorEl = document.getElementById('form-error');
        errorEl.textContent = error.message || 'Failed to update form. Please try again.';
        errorEl.classList.remove('d-none');
        errorEl.scrollIntoView({ behavior: 'smooth' });
      }
    });
  });
</script>
<%- include('../../partials/form-builder-styles') %>
